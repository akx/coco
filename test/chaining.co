# Basic chained function calls.
identityWrap = (x) -> -> x
eq true, identityWrap(identityWrap(true))()()


# Chained accesses split on dot + newline, backwards and forwards.
$ = {}
$.self = $
$.begin = $.do = $.end = -> this

ok $.
  begin().
     do().
   self.
     self.
  end().
self

# Leading dots introduce dummy blocks and/or close implicit indentations.
r = $.self
     .begin()
       .do()
       .do -> 0; 1
       .begin()
         .do ->
            2
            3
       .end 4, ->
     .end()
eq r, $


# Semicolon suppression before dots
eq \1,
  8.toString 8; .charAt 0


# Paren-free method chains
eq \23,
  \4 .replace /\d/ 2 .concat 3


# Ensure that indented array literals don't trigger whitespace rewriting.
eq 2 [
  [[[[],
     []],
  [[]]]],
[]].length


eq 'Hello', String(
              """
              Hello
              """)


eq msg = 'special accessors should also continue lines',
   msg
   .~toString
   ?.valueOf()()
eq 0,
  [0]
  ?.0


# Bracketless Accesses
a = [0]
eq 0, a.0
eq 0, a."0"
eq 0, a."#{0}"
eq 0, a.(0)
eq 0, [a].0.0
eq a.* = 1, a.1
eq '0'.0, '10'.1

eq 1, [-> it]. 0  1
eq 1, [-> it].'0' 1


# `prototype`/`constructor` shorhands
eq Array::toString, Array.prototype.toString
eq 12345..toString, 123.constructor.toString
eq 0 (:::0)::
eq 0 (..:0)..


# Length Star
eq [1, 2, 3][*-1], 3
eq 0[*], void
eq [0][*-*], 0

throws 'stray star on line 1' -> Coco.compile '[*-1]'


# Binding Access
parent =
  child:
    method: -> @member
    member: 42
eq 42, do(0; parent.child.~method)
eq 42, do(0; parent.child~"me#{'th'}od")
eq 42, parent.child. ~ [\method] null


# Dots have to workaround syntax error when accessing a simple number.
eq '0 .go;'  , Coco.compile '0.go', {+bare}
# Brackets don't.
eq "0['do'];", Coco.compile '0.do', {+bare}


# Multiaccess
eq '2,3', '' + [3,2][1,0]
eq '2,3', '' + [0,1,2,3][*-2,*-1]
eq '2,3', '' + {2,3}<[2 3]>
eq '-Infinity,Infinity', '' + Number[\NEGATIVE_INFINITY, \POSITIVE_INFINITY]

throws 'calling an array on line 1'    -> Coco.compile 'a[0 1]()'
throws 'invalid constructor on line 1' -> Coco.compile 'new a[0 1]'


# Automatic Dot Insertion
eq @toString, @\toString
eq @toString, @"to#{\S}tring"

{ok}\ok 1
[ok]0 1

eq 0 [[0]]0.0

eq null [null]?0
eq void {0}?1?p

v = void
x = y: {\z}
eq void v?=y.z
eq void v
eq \z   x?=y.z
eq \z   x


# Semiautovivification
o = {}
o.!a.@b .push 0 1
o.a!c@d .push 2 3
o?.!a?.@b?!e?@f.4 = 5
eq '0,1' ''+o.a.b
eq '2,3' ''+o.a.c.d
eq 5 o.a.b.e.f.4
